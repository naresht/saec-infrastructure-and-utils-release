// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.bfds.scheduling.domain;

import com.bfds.scheduling.domain.Holiday;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;

privileged aspect Holiday_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext(unitName = "entityManagerFactory")
    transient EntityManager Holiday.entityManager;
    
    public static final EntityManager Holiday.entityManager() {
        EntityManager em = new Holiday().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long Holiday.countHolidays() {
        return entityManager().createQuery("SELECT COUNT(o) FROM Holiday o", Long.class).getSingleResult();
    }
    
    public static List<Holiday> Holiday.findAllHolidays() {
        return entityManager().createQuery("SELECT o FROM Holiday o", Holiday.class).getResultList();
    }
    
    public static Holiday Holiday.findHoliday(Long id) {
        if (id == null) return null;
        return entityManager().find(Holiday.class, id);
    }
    
    public static List<Holiday> Holiday.findHolidayEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM Holiday o", Holiday.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void Holiday.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void Holiday.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Holiday attached = Holiday.findHoliday(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void Holiday.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void Holiday.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public Holiday Holiday.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Holiday merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
